I"û[<h1 id="5-—Å–¥–µ–ª–∞–π-—Å–∞–º">5. –°–¥–µ–ª–∞–π —Å–∞–º</h1>

<p><br /></p>

<h3 id="1-—Å–¥–µ–ª–∞–π-—Å–∞–º---–º–∞–ø–ø–∏–Ω–≥-–¥–∞–Ω–Ω—ã—Ö">1. –°–¥–µ–ª–∞–π —Å–∞–º - –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">loc</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">location_key</span><span class="p">:</span> <span class="p">[</span><span class="mi">32</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">11</span><span class="p">],</span>
    <span class="na">autoassign</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">location_key</span><span class="p">:</span> <span class="p">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
    <span class="na">autoassign</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">bulkConfig</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">dataValues</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">config_key</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">dataValues</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">config_key</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">];</span>

<span class="c1">// const result = _.map(loc, (locEl, index) =&gt; {</span>
<span class="c1">//   return _.map(locEl.location_key, (locationKey) =&gt; {</span>
<span class="c1">//     return {</span>
<span class="c1">//       config_key: bulkConfig[index].dataValues.config_key,</span>
<span class="c1">//       location_key: locationKey,</span>
<span class="c1">//       autoassign: locEl.autoassign,</span>
<span class="c1">//     };</span>
<span class="c1">//   });</span>
<span class="c1">// });</span>

<span class="c1">// const flattenedResult = _.flatten(result);</span>

<span class="c1">// console.log('result', flattenedResult);</span>

<span class="kd">const</span> <span class="nx">getConfigs</span> <span class="o">=</span> <span class="p">(</span><span class="nx">locEl</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">locEl</span><span class="p">.</span><span class="nx">location_key</span><span class="p">,</span> <span class="p">(</span><span class="nx">locationKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">config_key</span><span class="p">:</span> <span class="nx">bulkConfig</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">dataValues</span><span class="p">.</span><span class="nx">config_key</span><span class="p">,</span>
      <span class="na">location_key</span><span class="p">:</span> <span class="nx">locationKey</span><span class="p">,</span>
      <span class="na">autoassign</span><span class="p">:</span> <span class="nx">locEl</span><span class="p">.</span><span class="nx">autoassign</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">configs</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="nx">loc</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">getConfigs</span><span class="p">).</span><span class="nx">flatten</span><span class="p">().</span><span class="nx">value</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">configs</span><span class="dl">'</span><span class="p">,</span> <span class="nx">configs</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<p>result</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>configs [
  { config_key: 100, location_key: 32, autoassign: 1 },
  { config_key: 100, location_key: 22, autoassign: 1 },
  { config_key: 100, location_key: 11, autoassign: 1 },
  { config_key: 200, location_key: 41, autoassign: 1 },
  { config_key: 200, location_key: 42, autoassign: 1 }
]

</code></pre></div></div>

<p><br /></p>

<h3 id="2-—Å–¥–µ–ª–∞–π-—Å–∞–º---—Ñ—É–Ω–∫—Ü–∏—è-classnames">2. –°–¥–µ–ª–∞–π —Å–∞–º - —Ñ—É–Ω–∫—Ü–∏—è classnames</h3>

<p>–ß–µ–≥–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å —Å chain. –ü–æ –±—ã—Å—Ç—Ä–æ–º—É –Ω–µ —Ä–∞–∑–±–µ—Ä—É—Å—å. –û—Å—Ç–∞–≤–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ chain.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">classNames</span> <span class="o">=</span> <span class="p">(</span><span class="nx">conditions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">conditions</span><span class="p">,</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span> <span class="p">?</span> <span class="nx">key</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">compact</span><span class="p">(</span><span class="nx">foo</span><span class="p">),</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// const getUsedClassName = async (value, key) =&gt; {</span>
  <span class="c1">//   console.log('------------');</span>

  <span class="c1">//   return (await value) ? key : undefined;</span>
  <span class="c1">// };</span>

  <span class="c1">// return _.chain(conditions).map(getUsedClassName).compact().join(' ').values();</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">isAuthor</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">isInFocus</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">liClass</span> <span class="o">=</span> <span class="nx">classNames</span><span class="p">({</span>
  <span class="na">item</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">active</span><span class="p">:</span> <span class="nx">isAuthor</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">item-hightlighted</span><span class="dl">'</span><span class="p">:</span> <span class="nx">isInFocus</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">liClass</span><span class="dl">'</span><span class="p">,</span> <span class="nx">liClass</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>liClass item item-hightlighted
</code></pre></div></div>

<p><br /></p>

<h3 id="3-—Å–¥–µ–ª–∞–π-—Å–∞–º---–∑–∞–º–µ–Ω–∞-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤-–≤-url">3. –°–¥–µ–ª–∞–π —Å–∞–º - –∑–∞–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ url</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">replaceParamsInUrl</span> <span class="o">=</span> <span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">replacements</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// –¢–∞–∫ –Ω–µ –Ω–∞–¥–æ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–π –º—É—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –æ–±—ä–µ–∫—Ç–æ–≤</span>
  <span class="c1">// _.map(replacements, (replacement) =&gt; {</span>
  <span class="c1">//   url = _.replace(url, ':' + replacement.from, replacement.to);</span>
  <span class="c1">// });</span>
  <span class="c1">// return url;</span>

  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
    <span class="nx">replacements</span><span class="p">,</span>
    <span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">replacement</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="dl">'</span><span class="s1">:</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">replacement</span><span class="p">.</span><span class="k">from</span><span class="p">,</span> <span class="nx">replacement</span><span class="p">.</span><span class="nx">to</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">url</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">initialUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/posts/:postId/comments/:commentId</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">resultUrl</span> <span class="o">=</span> <span class="nx">replaceParamsInUrl</span><span class="p">(</span><span class="nx">initialUrl</span><span class="p">,</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">from</span><span class="p">:</span> <span class="dl">'</span><span class="s1">postId</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">to</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">from</span><span class="p">:</span> <span class="dl">'</span><span class="s1">commentId</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">to</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">]);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">resultUrl</span><span class="dl">'</span><span class="p">,</span> <span class="nx">resultUrl</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resultUrl /posts/1/comments/3
</code></pre></div></div>

<p><br /></p>

<h3 id="4-—Å–¥–µ–ª–∞–π-—Å–∞–º---—Å–æ–æ–±—â–µ–Ω–∏—è-–≤–∞–ª–∏–¥–∞—Ü–∏–∏">4. –°–¥–µ–ª–∞–π —Å–∞–º - —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">backendErrors</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">email</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">errors</span><span class="p">:</span> <span class="p">[{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Can't be bank</span><span class="dl">"</span> <span class="p">}],</span>
  <span class="p">},</span>
  <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">errors</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Must contain symbols in different case</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Must be at least 8 symbols long</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
  <span class="na">passwordConfirmation</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">errors</span><span class="p">:</span> <span class="p">[{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Must match with password</span><span class="dl">'</span> <span class="p">}],</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">humanReadableBackendErrors</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">backendErrors</span><span class="p">,</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">field</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">fieldMessages</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">errors</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1">, </span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">();</span>

  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">upperFirst</span><span class="p">(</span><span class="nx">field</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">fieldMessages</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">result</span><span class="dl">'</span><span class="p">,</span> <span class="nx">humanReadableBackendErrors</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<p>result</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>result [
  "Email: Can't be bank",
  'Password: Must contain symbols in different case, Must be at least 8 symbols long',
  'PasswordConfirmation: Must match with password'
]

</code></pre></div></div>

<p><br /></p>

<h3 id="5-—Å–¥–µ–ª–∞–π-—Å–∞–º---–≤–ª–æ–∂–µ–Ω–Ω—ã–µ-—Å–ø–∏—Å–∫–∏">5. –°–¥–µ–ª–∞–π —Å–∞–º - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">flatList</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">lvl 1 tiem 1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">parentId</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">lvl 1 tiem 2</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">parentId</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">lvl 2 tiem 3</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">parentId</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">lvl 3 tiem 4</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">parentId</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">lvl 3 tiem 5</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">parentId</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">addChildren</span> <span class="o">=</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">flatList</span><span class="p">,</span> <span class="p">(</span><span class="nx">childItem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">childItem</span><span class="p">.</span><span class="nx">parentId</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="kd">let</span> <span class="nx">nestedChildren</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">children</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">nestedChildren</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">children</span><span class="p">,</span> <span class="nx">addChildren</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">item</span><span class="p">,</span> <span class="p">{</span> <span class="na">children</span><span class="p">:</span> <span class="nx">nestedChildren</span> <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">nestedList</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="nx">flatList</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">parentId</span> <span class="o">===</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">addChildren</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">value</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">nestedList</span><span class="dl">'</span><span class="p">,</span> <span class="nx">nestedList</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nestedList [
  {
    id: 1,
    name: 'lvl 1 tiem 1',
    parentId: null,
    children: [ [Object] ]
  },
  {
    id: 2,
    name: 'lvl 1 tiem 2',
    parentId: null,
    children: [ [Object] ]
  }
]
</code></pre></div></div>
:ET