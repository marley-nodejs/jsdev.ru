I"eG<h1 id="event-loop">Event Loop</h1>

<p>https://www.youtube.com/watch?v=w7wPSVB-S28</p>

<p><br /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Event Loop</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">whatIsCallstack</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">[foo]: I am here!</span><span class="dl">'</span><span class="p">);</span>

    <span class="c1">// throw new Error('damn!');</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">[bar]: I am here!</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">foo</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">baz</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">[baz]: I am here!</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">baz</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// we may call our funcs recursively</span>

<span class="c1">// ! Talk about block</span>

<span class="c1">// Queue:</span>
<span class="c1">//</span>

<span class="c1">// ----STACK----</span>
<span class="c1">//  ----------</span>
<span class="c1">// |          |</span>
<span class="c1">// |          |</span>
<span class="c1">// |          |</span>
<span class="c1">// |          |</span>
<span class="c1">// |          |</span>
<span class="c1">// |          |</span>

<span class="kd">function</span> <span class="nx">callbacks</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">cb</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">World</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">asyncMethod</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">asyncForEach</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span>
      <span class="c1">// func inner</span>
      <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">cb</span><span class="p">(</span><span class="nx">item</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">asyncForEach</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">async</span><span class="dl">'</span><span class="p">,</span> <span class="nx">item</span><span class="p">));</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">));</span>

  <span class="c1">// [1, 2, 3].forEach( a =&gt; somethingSlow(a) );</span>
  <span class="c1">// it's very slow</span>

  <span class="c1">// asyncForEach([1, 2, 3], (a) =&gt; somethingSlow(a));</span>

  <span class="kd">function</span> <span class="nx">somethingSlow</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// I mean realy sloooooow</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">interviewCase</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">setTimeoutOnly</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="mi">200</span><span class="p">);</span>

    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">promiseInGame</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>

    <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">trickyPromise</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
      <span class="nx">res</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>

    <span class="c1">// WTF</span>
    <span class="c1">// new Promise( (resolve, reject) =&gt; {</span>
    <span class="c1">//   console.log('p', 1);</span>
    <span class="c1">//   console.log('p', 2);</span>
    <span class="c1">//   // throw new Error('fhdjfhsdjf');</span>
    <span class="c1">//   resolve('p' + 3);</span>
    <span class="c1">// })</span>
    <span class="c1">// .then(a =&gt; console.log(a))</span>
    <span class="c1">// .catch(err =&gt; console.log('Oops'));</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">difficultPromiseInGame</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>

    <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 3</span>
        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 4</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 4</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 5</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span> <span class="c1">// 5</span>

    <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">6</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// setTimeoutOnly();</span>
  <span class="c1">// promiseInGame();</span>
  <span class="c1">// trickyPromise();</span>
  <span class="c1">// difficultPromiseInGame();</span>
<span class="p">}</span>

<span class="c1">// whatIsCallstack();</span>
<span class="c1">// callbacks();</span>
<span class="c1">// asyncMethod();</span>
<span class="c1">// interviewCase();</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">print</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span> <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">transform</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">resultFn</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">base len: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">stepFn</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resultFn</span> <span class="o">=</span> <span class="nx">resultFn</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">arg</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="na">len</span><span class="p">:</span> <span class="nx">resultFn</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">resultFn</span> <span class="p">});</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">resultFn</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">stepFn</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">resultFn</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">stepFn</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">print</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">tranformedPrint</span> <span class="o">=</span> <span class="nx">transform</span><span class="p">(</span><span class="nx">print</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">fnWith3Params</span> <span class="o">=</span> <span class="nx">tranformedPrint</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="youtube-про-цикл-событий-в-javascript-или-как-на-самом-деле-работает-асинхронность-перевод-rus-2017">[YouTube] Про цикл событий в JavaScript или “как на самом деле работает асинхронность”? [Перевод RUS, 2017]</h3>

<p><br /></p>

<div align="center">
    <iframe width="853" height="480" src="https://www.youtube.com/embed/8cV4ZvHXQL4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>

<p><br /></p>

<p><a href="/files/Event-Loop.pdf">+ Pdf’ka</a></p>
:ET