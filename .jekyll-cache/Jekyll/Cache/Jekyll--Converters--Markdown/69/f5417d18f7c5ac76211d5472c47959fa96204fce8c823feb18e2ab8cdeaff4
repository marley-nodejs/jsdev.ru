I"¹^<h1 id="this">This</h1>

<p>https://www.youtube.com/watch?v=nAniujU5wUc&amp;feature=emb_logo</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">-----this-----</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">workWithThis</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">field</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="na">print</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">print fn:</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">field</span><span class="p">);</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="kd">function</span> <span class="nx">firstRound</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">obj.print()</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">secondRound</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">from outer</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">field</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">outer()</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">outer</span><span class="p">();</span>

    <span class="nx">obj</span><span class="p">.</span><span class="nx">outer</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">obj.outer()</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">outer</span><span class="p">();</span>

    <span class="kd">let</span> <span class="nx">separateFn</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">separateFn</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">separateFn</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1"> - Think about ReferenceType</span><span class="dl">'</span><span class="p">);</span>

    <span class="c1">// o1 = {</span>
    <span class="c1">//     innerObj: {</span>
    <span class="c1">//         field: 10,</span>
    <span class="c1">//         print: function() {</span>
    <span class="c1">//             console.log('inner object', this.field);</span>
    <span class="c1">//         }</span>
    <span class="c1">//     },</span>
    <span class="c1">//     field: 66</span>
    <span class="c1">// };</span>

    <span class="c1">// o1.innerObj.print();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">withDifferentTypes</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">obj.print()</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">(obj.print)();</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">(obj.print = obj.print)()</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">print</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">)();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">(obj.print || obj.print)()</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">print</span> <span class="o">||</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">)();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">[obj.print][0]()</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">[</span><span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">][</span><span class="mi">0</span><span class="p">]();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">callBindApply</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">someFn</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">print from some fn:</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">field</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">call &amp; apply:</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">someFn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
    <span class="nx">someFn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">binded fn:</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">binded</span> <span class="o">=</span> <span class="nx">someFn</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
    <span class="nx">binded</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">binded with call &amp; apply:</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">anotherObj</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">another</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="nx">binded</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">anotherObj</span><span class="p">);</span>
    <span class="nx">binded</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">anotherObj</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">extraRound</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">arrowObj</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">field</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
      <span class="na">print</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">arrow print fn:</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">field</span><span class="p">);</span>
        <span class="p">};</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">arrowObj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>

    <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span> <span class="o">=</span> <span class="nx">arrowObj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">separatePrint</span> <span class="o">=</span> <span class="nx">arrowObj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">print arrow func</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">arrowObj</span><span class="p">.</span><span class="nx">print</span><span class="p">()();</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
    <span class="nx">separatePrint</span><span class="p">();</span>
    <span class="nx">arrowObj</span><span class="p">.</span><span class="nx">print</span><span class="p">().</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">end</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// firstRound();</span>
  <span class="c1">// secondRound();</span>
  <span class="c1">// withDifferentTypes();</span>
  <span class="c1">// callBindApply();</span>
  <span class="c1">// extraRound();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">checkGlobalThis</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">withStrict</span><span class="p">()</span> <span class="p">{</span>
    <span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n\n</span><span class="s1">with strict mode, this:</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// console.log('window &amp; this:', this === window); // works with browsers console</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">without strict mode, this:</span><span class="se">\n\n</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>

  <span class="nx">withStrict</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">thisWithConstructor</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">A</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">B</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>

    <span class="k">return</span> <span class="dl">'</span><span class="s1">for what?</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">C</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">a</span><span class="p">:</span> <span class="dl">'</span><span class="s1">meaning of life</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1">with constructors:</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1"> - simple constructor:</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">A</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1"> - constructor which returns primitive:</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">B</span><span class="p">());</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1"> - constructor which returns another object:</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">C</span><span class="p">());</span>

  <span class="c1">// console.log('\nJust B()', B());</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">additionalFeatures</span><span class="p">()</span> <span class="p">{</span>
  <span class="nb">Number</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="s1"> I am inside generator function</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// console.log('\inside loop');</span>
      <span class="k">yield</span> <span class="nx">i</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isFirstLetterCapitalA</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([...</span><span class="nx">number</span><span class="p">]);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
    <span class="dl">'</span><span class="se">\n</span><span class="s1">Alphabet - is first A?  - </span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">Alphabet</span><span class="dl">'</span><span class="p">.</span><span class="nx">isFirstLetterCapitalA</span><span class="p">()</span>
  <span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Bird - is first A? -  </span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bird</span><span class="dl">'</span><span class="p">.</span><span class="nx">isFirstLetterCapitalA</span><span class="p">());</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">inerestingInterviewIssues</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">amIArnold</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">User</span><span class="p">(</span><span class="nx">login</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="nx">login</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">login</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">arnold</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">Arnold</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arnold</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arnold</span><span class="p">.</span><span class="nx">getName</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span> <span class="na">login</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John Doe</span><span class="dl">'</span> <span class="p">}));</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">withArguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">length</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">length</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">method</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// fn, 123, 456</span>
        <span class="nx">fn</span><span class="p">();</span> <span class="c1">// 10</span>
        <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]();</span> <span class="c1">// 3</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">o</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// amIArnold();</span>
  <span class="c1">// withArguments();</span>
<span class="p">}</span>

<span class="c1">// workWithThis();</span>

<span class="c1">// checkGlobalThis();</span>

<span class="c1">// thisWithConstructor();</span>
<span class="c1">// additionalFeatures();</span>
<span class="c1">// inerestingInterviewIssues();</span>

<span class="cm">/**
 * Example with inner calls
 */</span>
<span class="c1">// function foo() {</span>
<span class="c1">//     function bar() {</span>
<span class="c1">//         return this.x;</span>
<span class="c1">//     }</span>

<span class="c1">//     // return bar();</span>
<span class="c1">//     return bar.call(this);</span>
<span class="c1">// }</span>

<span class="c1">// const obj = {x: 10, test: foo};</span>
<span class="c1">// console.log('Result of inner calls:', obj.test());</span>
<span class="cm">/**
 * End of example
 */</span>
</code></pre></div></div>
:ET