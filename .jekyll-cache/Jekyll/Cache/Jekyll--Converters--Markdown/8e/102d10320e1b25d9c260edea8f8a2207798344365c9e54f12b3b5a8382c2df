I"–ˆ<h1 id="promise-iterator-generator-proxy">Promise, Iterator, Generator, Proxy</h1>

<p>https://www.youtube.com/watch?v=GHrXvQhb7K0</p>

<p><br /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">readlineSync</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">readline-sync</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Welcome to RS Lecture - ES6 Advanced</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">promises</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Promise</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">base</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">),</span> <span class="mi">1500</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">data</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> World</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>

    <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">First</span><span class="dl">'</span><span class="p">),</span>
      <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">(</span><span class="dl">'</span><span class="s1">Second</span><span class="dl">'</span><span class="p">)),</span>
      <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">(</span><span class="dl">'</span><span class="s1">Third</span><span class="dl">'</span><span class="p">),</span> <span class="mi">0</span><span class="p">)),</span>
    <span class="p">])</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">results</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">results</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">from All:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">result</span><span class="p">));</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">something went wrong</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">));</span>

    <span class="nb">Promise</span><span class="p">.</span><span class="nx">race</span><span class="p">([</span>
      <span class="c1">// Promise.reject('First'),</span>
      <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">(</span><span class="dl">'</span><span class="s1">Third</span><span class="dl">'</span><span class="p">),</span> <span class="mi">0</span><span class="p">)),</span>
      <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">(</span><span class="dl">'</span><span class="s1">Second</span><span class="dl">'</span><span class="p">)),</span>
      <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">First</span><span class="dl">'</span><span class="p">),</span>
    <span class="p">])</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">from Race:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">something went wrong</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">interestingExample</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">waitTimeout</span><span class="p">(</span><span class="nx">delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">delay</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">waitTimeout</span><span class="p">(</span><span class="mi">3000</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">call after 3000ms</span><span class="dl">'</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="c1">// base();</span>
  <span class="c1">// interestingExample();</span>

  <span class="c1">// Promise.resolve</span>
  <span class="c1">// Promise.reject</span>
  <span class="c1">// Promise.all</span>
  <span class="c1">// Promise.race</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">iteratorGenerator</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Iterator / Generator</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">intro</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span><span class="o">*</span> <span class="nx">gen</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
      <span class="k">yield</span> <span class="mi">3</span><span class="p">;</span>
      <span class="c1">// return 4;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">it</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">it</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">it</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">it</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">it</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>
    <span class="c1">// console.log(it.next());</span>
    <span class="c1">// console.log(it.next());</span>

    <span class="c1">// let arrayIt = ['a', 'b', 'c'][Symbol.iterator]();</span>

    <span class="c1">// console.log(arrayIt.next());</span>
    <span class="c1">// console.log(arrayIt.next());</span>
    <span class="c1">// console.log(arrayIt.next());</span>
    <span class="c1">// console.log(arrayIt.next());</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">examples</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// (1)</span>
    <span class="kd">function</span><span class="o">*</span> <span class="nx">range</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">,</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>

      <span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">&lt;=</span> <span class="nx">end</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nx">current</span><span class="p">;</span>
        <span class="nx">current</span> <span class="o">+=</span> <span class="nx">step</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([...</span><span class="nx">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]);</span>

    <span class="c1">// (2)</span>
    <span class="kd">function</span><span class="o">*</span> <span class="nx">fact</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>

      <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nx">current</span><span class="p">;</span>
        <span class="nx">current</span> <span class="o">*=</span> <span class="o">++</span><span class="nx">n</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">fact</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
      <span class="nx">f</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
      <span class="nx">f</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
      <span class="nx">f</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
      <span class="nx">f</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
      <span class="nx">f</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
    <span class="p">);</span>

    <span class="c1">// (3)</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nx">i</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([...</span><span class="mi">10</span><span class="p">]);</span> <span class="c1">// [0, 2, 3, ... , 9]</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">iterableClass</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nx">EventHandlers</span> <span class="p">{</span>
      <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">handlersMap</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="p">}</span>

      <span class="nx">add</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">handlersMap</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">handlersMap</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">handlersMap</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">of</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handlersMap</span><span class="p">))</span> <span class="p">{</span>
          <span class="kd">let</span> <span class="nx">handlerList</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handlersMap</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>

          <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">handlerList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">yield</span> <span class="p">{</span>
              <span class="nx">key</span><span class="p">,</span>
              <span class="na">fn</span><span class="p">:</span> <span class="nx">handlerList</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>
            <span class="p">};</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">handlers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventHandlers</span><span class="p">();</span>

    <span class="nx">handlers</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">click 1</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">handlers</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">click 2</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">handlers</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">scroll</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">scroll 1</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">[handler inside]:</span><span class="dl">'</span><span class="p">,</span> <span class="p">...</span><span class="nx">handlers</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">nested</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span><span class="o">*</span> <span class="nx">gen</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">function</span><span class="o">*</span> <span class="nx">innerGen</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="dl">'</span><span class="s1">inner 1</span><span class="dl">'</span><span class="p">;</span>
        <span class="k">yield</span> <span class="dl">'</span><span class="s1">inner 2</span><span class="dl">'</span><span class="p">;</span>
        <span class="k">yield</span> <span class="dl">'</span><span class="s1">inner 3</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">yield</span><span class="o">*</span> <span class="nx">innerGen</span><span class="p">();</span>
      <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">it</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">[Nested example]:</span><span class="dl">'</span><span class="p">,</span> <span class="p">[...</span><span class="nx">it</span><span class="p">]);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">simpleChatBot</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span><span class="o">*</span> <span class="nx">createBot</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="k">yield</span> <span class="dl">"</span><span class="s2">Hello, I'm bot. Who are you?</span><span class="se">\n</span><span class="dl">"</span><span class="p">;</span>

      <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">end</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bye!</span><span class="dl">'</span><span class="p">);</span>
          <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">echo</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">I am</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Nice to meet you, </span><span class="p">${</span><span class="nx">msg</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span><span class="s2">!`</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I do not understand you :(</span><span class="dl">'</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">msg</span> <span class="o">=</span> <span class="k">yield</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">What next?</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">bot</span> <span class="o">=</span> <span class="nx">createBot</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">nextElem</span> <span class="o">=</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// Init bot</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nx">nextElem</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">readlineSync</span><span class="p">.</span><span class="nx">question</span><span class="p">(</span><span class="nx">nextElem</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">nextElem</span> <span class="o">=</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">answer</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// intro();</span>
  <span class="c1">// examples();</span>
  <span class="c1">// iterableClass();</span>
  <span class="c1">// nested();</span>
  <span class="c1">// simpleChatBot();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">proxies</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">intro</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span>
      <span class="kd">get</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">key</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">target</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">?</span> <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">:</span> <span class="mi">9</span><span class="p">;</span>
      <span class="p">},</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">updateBehavior</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John Doe</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="kd">let</span> <span class="nx">upperUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="p">{</span>
      <span class="kd">get</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">property</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">target</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span> <span class="p">?</span> <span class="nx">target</span><span class="p">[</span><span class="nx">property</span><span class="p">].</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">;</span>
      <span class="p">},</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">upperUser</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">,</span> <span class="nx">upperUser</span><span class="p">.</span><span class="nx">role</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">metaProgramming</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">evenNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">([],</span> <span class="p">{</span>
      <span class="na">get</span><span class="p">:</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">index</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">has</span><span class="p">:</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">2 in evenNumbers</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span> <span class="k">in</span> <span class="nx">evenNumbers</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">7 in evenNumbers</span><span class="dl">'</span><span class="p">,</span> <span class="mi">7</span> <span class="k">in</span> <span class="nx">evenNumbers</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">evenNumbers[3]</span><span class="dl">'</span><span class="p">,</span> <span class="nx">evenNumbers</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">evenNumbers[-2]</span><span class="dl">'</span><span class="p">,</span> <span class="nx">evenNumbers</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]);</span>
  <span class="p">}</span>

  <span class="c1">// intro();</span>
  <span class="c1">// updateBehavior();</span>
  <span class="c1">// metaProgramming();</span>

  <span class="c1">// say about Function hooks / AOP</span>
<span class="p">}</span>

<span class="c1">// promises();</span>
<span class="c1">// iteratorGenerator();</span>
<span class="c1">// proxies();</span>
</code></pre></div></div>
:ET